# SPDX-FileCopyrightText: 2022 Renaissance Computing Institute. All rights reserved.
#
# SPDX-License-Identifier: GPL-3.0-or-later
# SPDX-License-Identifier: LicenseRef-RENCI
# SPDX-License-Identifier: MIT

image:
  registry: docker.io
  repository: kartoza/geoserver
  tag: "2.20.1"
  pullPolicy: IfNotPresent

geoserverUser: someuser

# For prefilled password
# It will be stored in secret later
geoserverPassword: somepassword

isAWS: false

database:
  db_name: somedb
  db_host: somehost
  db_port: 1234
  db_username: someuser
  db_password: somepassword

resources:
  limits:
    cpu: 1500m
    ephemeral-storage: 256Mi
    memory: 20Gi
  requests:
    cpu: 500m
    ephemeral-storage: 64Mi
    memory: 10Gi

# Use this if you have predefined secrets
existingSecret: |

# Define this for extra GeoServer environment variables
extraPodEnv: |
#  - name: KEY_1
#    value: "VALUE_1"

# This will be evaluated as pod spec
extraPodSpec: |
#  nodeSelector:
#    a.label: value

# Define this for extra secrets to be included
extraSecret: |
#  key_1: value_1

# Define this for extra config map
extraConfigMap: |
# file_1: conf content

# Define this for extra volume mounts in the pod
extraVolumeMounts: |
# You may potentially mount a config map/secret
#  - name: custom-config
#    mountPath: /docker-entrypoint.sh
#    subPath: docker-entrypoint.sh
#    readOnly: true

# Define this for extra volume (in pair with extraVolumeMounts)
extraVolume: |
# You may potentially mount a config map/secret
#  - name: custom-config
#    configMap:
#      name: geoserver-config

service:
  ## GeoServer service type
  type: ClusterIP
  # clusterIP: ""
  # externalIPs: ""
  port: 80

  # nodePort:

  labels: |
  annotations: |

  # loadBalancerIP:

  # loadBalancerSourceRanges:
  # - 10.10.10.0/24

ingress:
  enabled: false
  annotations:
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "512m"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "86400"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "86400"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "86400"
    nginx.ingress.kubernetes.io/configuration-snippet: "keepalive_timeout 86400;"
    nginx.ingress.kubernetes.io/connection-proxy-header: "keep-alive"
    nginx.ingress.kubernetes.io/send-timeout: "86400"
    nginx.ingress.kubernetes.io/service-upstream: "true"
    nginx.ingress.kubernetes.io/upstream-keepalive-timeout: "86400"
  labels: {}
  host: somehostname
  tls:
    enabled: false
    ## Provide secret name if tls is enabled
    secretName: somesecretname

# probe can be overridden
probe: |

## You can also set global storage class
# global.storageClass: "-"

persistence:
  geoserverDataDir:
    enabled: true
    existingClaim: false
    mountPath: /some/data_dir
    subPath: "data_dir"
    size: 10Gi
    # storageClass: "-"
    accessModes:
      - ReadWriteOnce
    annotations:
      helm.sh/resource-policy: keep
  geowebcacheCacheDir:
    enabled: true
    existingClaim: false
    mountPath: /some/data_dir/gwc
    subPath: "gwc"
    size: 10Gi
    # storageClass: "-"
    accessModes:
      - ReadWriteOnce
    annotations: {}

networkPolicy:
  ## Enable creation of NetworkPolicy resources. Only Ingress traffic is filtered for now.
  ##
  enabled: false

  ## The Policy model to apply. When set to false, only pods with the correct
  ## client label will have network access to the port PostgreSQL is listening
  ## on. When true, PostgreSQL will accept connections from any source
  ## (with the correct destination port).
  ##
  allowExternal: true

  ## if explicitNamespacesSelector is missing or set to {}, only client Pods that are in the networkPolicy's namespace
  ## and that match other criteria, the ones that have the good label, can reach the DB.
  ## But sometimes, we want the DB to be accessible to clients from other namespaces, in this case, we can use this
  ## LabelSelector to select these namespaces, note that the networkPolicy's namespace should also be explicitly added.
  ##
  ## Example:
  ## explicitNamespacesSelector:
  ##   matchLabels:
  ##     role: frontend
  ##   matchExpressions:
  ##    - {key: role, operator: In, values: [frontend]}
  explicitNamespacesSelector: {}

nodeSelector: {}