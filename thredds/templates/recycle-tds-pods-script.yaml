# SPDX-FileCopyrightText: 2024 Renaissance Computing Institute. All rights reserved.
#
# SPDX-License-Identifier: GPL-3.0-or-later
# SPDX-License-Identifier: LicenseRef-RENCI
# SPDX-License-Identifier: MIT

{{ if .Values.recycle.enable }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: "recycle-tds-pods-script"
data:
  recycle-tds-pods.sh: |-
    #!/bin/bash
    #########
    # Script to delete TDS pods so they recycle.
    # this is done because TDS ends up in a corrupted state after some period of use.
    #########
    while true ; do
      # get the OBS/MOD pods
      OBSMOD_PODS=$(kubectl -n {{ .Values.recycle.namespace }} get pods -o name --field-selector=status.phase=Running | grep {{ .Values.recycle.obsPodName }})
      STAGING_PODS=$(kubectl -n {{ .Values.recycle.namespace }} get pods -o name --field-selector=status.phase=Running | grep {{ .Values.recycle.stagingPodName }})

      # if there no OBS/MOD pods running 
      if [ "${OBSMOD_PODS}" == "" ] && [ "${STAGING_PODS}" == "" ]; then
        # get the TDS pods
        TDS_PODS=$(kubectl -n {{ .Values.recycle.namespace }} get pods -l=app.kubernetes.io/name='{{ .Values.recycle.tdsPodName }}' -o name --field-selector=status.phase=Running)
        
        # for each pod
        for POD in $TDS_PODS; do
          # create the delete command
          DELETE_CMD=$(echo "kubectl -n {{ .Values.recycle.namespace }} delete ${POD}" | sed -e 's/\// /g')
        
          # execute the delete command
          echo "About to run: ${DELETE_CMD}"
          eval ${DELETE_CMD}

          echo "Waiting {{ .Values.recycle.betweenDeletesSleep }} before next pod restart."

          # sleep a while for a new pod to be created
          sleep {{ .Values.recycle.betweenDeletesSleep }}
        done
    
        # get out of do loop
        break
      else 
        echo "Waiting {{ .Values.recycle.betweenObsDone }} for OBS/MOD pod to complete"

        # wait a while before checking again
        sleep {{ .Values.recycle.betweenObsDone }}
      fi 
    done
    
    echo "Recycle complete."

---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: recycle-tds-pods-cronjob
  labels:
    app: {{- include "apsviz-thredds.labels" . | nindent 4 }}
spec:
  schedule: "{{ .Values.recycle.crontab }}"
  jobTemplate:
    spec:
      ttlSecondsAfterFinished: 3
      template:
        spec:
          serviceAccountName: {{ .Values.recycle.serviceAccount }}
          containers:
          - name: recycle-tds-pods
            image: bitnami/kubectl:latest
            imagePullPolicy: Always
            command: ['/bin/bash']
            args: ['recycle-tds-pods.sh']
            resources:
              limits:
                cpu: 110m
                ephemeral-storage: 128Mi
                memory: 70Mi
              requests:
                cpu: 100m
                ephemeral-storage: 64Mi
                memory: 64Mi
            volumeMounts:
            - name: "recycle-tds-pods-script"
              mountPath: recycle-tds-pods.sh
              subPath: "recycle-tds-pods.sh"
          restartPolicy: Never
          volumes:
            - name: recycle-tds-pods-script
              configMap:
                name: "recycle-tds-pods-script"
                defaultMode: 0777
{{ end }}